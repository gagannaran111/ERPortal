@model ERPortal.Core.ViewModels.OperatorERProposalViewModel


<div class="container-fluid">
    <div class="row">
        <div class="tab-content shadow-lg col-lg-12 ">
            <ul class="nav nav-tabs bg-gradient-light mt-3">
                @{
                    if (Model.ERApplications.AppId == null)
                    {
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" href="#ERProposalTab">ER Screening Report</a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" href="#ERProposalViewTab">ER Screening View Report</a>
                        </li>
                    }
                }
                @*<li class="nav-item">
                        <a class="nav-link Querycommenttablink" data-toggle="tab" href="#QueryCommentTab">Query</a>
                    </li>*@
            </ul>
            @{
                if (Model.ERApplications.AppId == null)
                {
                    <div id="ERProposalTab" class="container-fluid tab-pane active mt-3">
                        <div class="justify-content-center">
                            @using (Ajax.BeginForm("SubmitERProposal", "Operator", new { FileRef = ViewBag.RefId }, new AjaxOptions
                            {
                                HttpMethod = "POST",
                                OnSuccess = "OnSuccess(data)",
                                OnFailure = "OnFailure(data)"

                                //LoadingElementId = "progress"
                            }, new { id = "operatorform" }))
                            {

                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.ERApplications.ERScreeningDetailId)
                                @Html.HiddenFor(model => model.ERApplications.AppId)
                                @Html.HiddenFor(model => model.ERApplications.OrganisationId)
                                @Html.HiddenFor(model => model.ERApplications.ERScreeningDetail.ReportDocumentPath, new { id = "ReportDocument" })


                                <div class="alert alert-success alert-dismissible showmsg d-none statussuccess">
                                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                                </div>
                                <div class="card border-success shadow-lg mb-3">
                                    <div class="card-header bg-gradient-success text-white">
                                        <div class="row">
                                            <div class="col-lg-6"><h4>ER Screening Report Detail</h4></div>
                                            <div class="col-lg-6 "><a href="#" class="btn btn-outline-light float-right GeneratePDF" id="printapp">Print</a></div>
                                        </div>
                                    </div>
                                    <div class="card-body ml-lg-5">
                                        <fieldset id="disabledForm">
                                            <div class="form-horizontal">
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                                <div class="form-row">
                                                    <h5 class="text-danger">All Fields Are Mandatory</h5>
                                                    <hr />
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.Organisation, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.Organisation.Name, new { @class = "form-control" })
                                                    </div>
                                                </div>


                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DropDownListFor(model => model.ERApplications.FieldTypeId, new SelectList(Model.FieldTypes, "Id", "Type"), "Choose...", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.FieldTypeId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldName, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EditorFor(model => model.ERApplications.FieldName, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.FieldName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.HydrocarbonType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EnumDropDownListFor(model => model.ERApplications.HydrocarbonType, "Choose...", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.HydrocarbonType, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row" id="uhcProdnMethodDiv" style="display: none">
                                                    @Html.LabelFor(model => model.ERApplications.UHCProductionMethod, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DropDownListFor(model => model.ERApplications.UHCProductionMethodId, new SelectList(Model.UHCProductionMethods, "Id", "Name"), "Select Method", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.UHCProductionMethod, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.DateOfDiscovery, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EditorFor(model => model.ERApplications.DateOfDiscovery, new { htmlAttributes = new { @class = "form-control datetimetext", @type = "text", @autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.DateOfDiscovery, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ImplementaionType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EnumDropDownListFor(model => model.ERApplications.ImplementaionType, "Choose...", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.ImplementaionType, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.DateOfInitialCommercialProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EditorFor(model => model.ERApplications.DateOfInitialCommercialProduction, new { htmlAttributes = new { @class = "form-control datetimetext", @type = "text", @autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.DateOfInitialCommercialProduction, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.PresentlyUnderProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.PresentlyUnderProduction, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.PresentlyUnderProduction, "Yes", new { @class = "form-check-label" })
                                                        </div>
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.PresentlyUnderProduction, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.PresentlyUnderProduction, "No", new { @class = "form-check-label" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group row" id="DateOfLastCommercialProductionDiv" style="display:none">
                                                    @Html.LabelFor(model => model.ERApplications.DateOfLastCommercialProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EditorFor(model => model.ERApplications.DateOfLastCommercialProduction, new { htmlAttributes = new { @class = "form-control datetimetext", @type = "text", @autocomplete = "off" } })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.DateOfLastCommercialProduction, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldOIIP, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="input-group mb-3">
                                                            @Html.EditorFor(model => model.ERApplications.FieldOIIP, new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon1" } })
                                                            <div class="input-group-append">
                                                                <span class="input-group-text" id="basic-addon1">MMbbl</span>
                                                            </div>
                                                        </div>

                                                        @Html.ValidationMessageFor(model => model.ERApplications.FieldOIIP, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldGIIP, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="input-group mb-3">
                                                            @Html.EditorFor(model => model.ERApplications.FieldGIIP, new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon2", disabled = true } })
                                                            <div class="input-group-append">
                                                                <span class="input-group-text" id="basic-addon2">TCF</span>
                                                            </div>
                                                        </div>
                                                        @Html.ValidationMessageFor(model => model.ERApplications.FieldGIIP, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>



                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.TechnicallyCompatible, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.TechnicallyCompatible, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.TechnicallyCompatible, "Yes", new { @class = "form-check-label" })
                                                        </div>
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.TechnicallyCompatible, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.TechnicallyCompatible, "No", new { @class = "form-check-label" })
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.EconomicViability, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.EconomicViability, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.EconomicViability, "Positive", new { @class = "form-check-label" })
                                                        </div>
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.EconomicViability, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.EconomicViability, "Negative", new { @class = "form-check-label" })
                                                        </div>
                                                    </div>
                                                </div>



                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ERScreeningInstitute, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DropDownListFor(model => model.ERApplications.ERScreeningDetail.ERScreeningInstituteId, new SelectList(Model.eRScreeningInstitutes, "Id", "InstituteName"), "Choose...", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.ERScreeningDetail.ERScreeningInstituteId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, "Yes", new { @class = "form-check-label" })
                                                        </div>

                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, "No", new { @class = "form-check-label" })
                                                        </div>
                                                        <div>  @Html.ValidationMessageFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, "", new { @class = "text-danger" })</div>
                                                    </div>
                                                </div>
                                                <div class="form-group row FirstOrderScrText d-none">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.TextAreaFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScrText, new { htmlAttributes = new { @class = "form-control" }, @rows = 10, @cols = 120 })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, "Yes", new { @class = "form-check-label" })
                                                        </div>
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, "No", new { @class = "form-check-label" })
                                                        </div>
                                                        <div>  @Html.ValidationMessageFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, "", new { @class = "text-danger" })</div>
                                                    </div>
                                                </div>
                                                <div class="form-group row SecondOrderScrText d-none">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">

                                                        @Html.TextAreaFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScrText, new { htmlAttributes = new { @class = "form-control" }, @rows = 10, @cols = 120 })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, true, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, "Yes", new { @class = "form-check-label" })
                                                        </div>
                                                        <div class="form-check form-check-inline">
                                                            @Html.RadioButtonFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, false, new { @class = "form-check-input" })
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, "No", new { @class = "form-check-label" })
                                                        </div>
                                                        <div>  @Html.ValidationMessageFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, "", new { @class = "text-danger" })</div>
                                                    </div>
                                                </div>
                                                <div class="form-group row ThirdOrderScrText d-none">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.TextAreaFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScrText, new { htmlAttributes = new { @class = "form-control" }, @rows = 10, @cols = 120 })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.AdditonalRemarks, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.EditorFor(model => model.ERApplications.AdditonalRemarks, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.ERApplications.AdditonalRemarks, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <div class="form-group row d-none" id="FileDiv">
                                                    <div class="col-lg-12">
                                                        <h6>ERScreening Report Documents</h6>
                                                    </div>
                                                    <div class="col-lg-6">
                                                        <div class="form-check form-check-inline">
                                                            @Html.TextBox("file", "", new { type = "file", id = "txtFile" })
                                                            <button type="button" value="Upload" class="btn btn-sm btn-primary UploadFile" data-filerefid="@ViewBag.RefId" data-divid="UploadFilesData" data-inputfile="#txtFile" style="z-index:99999999"><i class="fas fa-upload"></i> Upload</button>
                                                            @*<input type="button" value="Upload" class="btn btn-sm btn-primary UploadFile" filerefid="@ViewBag.RefId" divid="UploadFilesData" inputfile="txtFile" style="z-index:99999999" />*@
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    <div class="col-lg-12 mt-3">
                                                        <div id="UploadFilesData" style="display:none;border:dashed; border-color:brown">
                                                            File Not Found
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group row justify-content-center">

                                                    <button type="submit" class="btn btn-primary" id="ERAppSubmit"><i class="fas fa-save"></i> Submit</button>

                                                </div>

                                            </div>
                                        </fieldset>
                                    </div>
                                </div>

                            }
                        </div>
                    </div>
                }
                else
                {
                    <div id="ERProposalViewTab" class="container-fluid tab-pane active">
                        <div class="row">
                            <div class="col-md-12 mt-4">

                                @Html.AntiForgeryToken()

                                <div class="card border-primary mb-3">
                                    <div class="card-header bg-gradient-primary text-white">
                                        <div class="row">
                                            <div class="col-lg-6"><h5><i class="fas fa-file-alt"></i> ER Screening Report</h5></div>
                                            <div class="col-lg-6 ">
                                                @*<a href="#" class="btn btn-sm btn-outline-light float-right ml-1 GeneratePDF" id="printapp"><i class="fas fa-print"></i> Print</a>*@
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body ml-lg-5">
                                        <fieldset id="disabledForm1" disabled>
                                            <div class="form-horizontal">
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.Organisation, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.Organisation.Name, new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.FieldType.Type, new { @class = "form-control" })

                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldName, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.FieldName, new { htmlAttributes = new { @class = "form-control" } })

                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.HydrocarbonType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.HydrocarbonType, "Choose...", new { @class = "form-control" })

                                                    </div>
                                                </div>

                                                <div class="form-group row" id="uhcProdnMethodDiv" style="display: none">
                                                    @Html.LabelFor(model => model.ERApplications.UHCProductionMethod, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.UHCProductionMethodId, new { @class = "form-control" })

                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.DateOfDiscovery, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.DateOfDiscovery, new { htmlAttributes = new { @class = "form-control datetimetext", @type = "text" } })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ImplementaionType, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.ImplementaionType, new { @class = "form-control" })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.DateOfInitialCommercialProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.DateOfInitialCommercialProduction, new { htmlAttributes = new { @class = "form-control ", @type = "text" } })

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.PresentlyUnderProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.DisplayTextFor(model => model.ERApplications.PresentlyUnderProduction)

                                                        </div>
                                                    </div>
                                                </div>
                                                @if (Model.ERApplications.PresentlyUnderProduction == false)
                                                {
                                                    <div class="form-group row" id="DateOfLastCommercialProductionDiv">
                                                        @Html.LabelFor(model => model.ERApplications.DateOfLastCommercialProduction, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                        <div class="col-sm-6 d-flex align-items-center">
                                                            @Html.DisplayFor(model => model.ERApplications.DateOfLastCommercialProduction, new { htmlAttributes = new { @class = "form-control", @type = "text" } })

                                                        </div>
                                                    </div>
                                                }
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ERScreeningInstitute.InstituteName, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">
                                                            @Html.DisplayFor(model => model.ERApplications.ERScreeningDetail.ERScreeningInstitute.InstituteName, new { @class = "form-check-input" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">

                                                            @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScreening)
                                                        </div>
                                                    </div>
                                                </div>
                                                @{
                                                    if (Model.ERApplications.ERScreeningDetail.FirstOrderScreening == false)
                                                    {
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                            <div class="col-sm-6 d-flex align-items-center">
                                                                <div class="form-check form-check-inline">

                                                                    @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.FirstOrderScrText)
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">

                                                            @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScreening)
                                                        </div>
                                                    </div>
                                                </div>
                                                @{
                                                    if (Model.ERApplications.ERScreeningDetail.SecondOrderScreening == false)
                                                    {
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                            <div class="col-sm-6 d-flex align-items-center">
                                                                <div class="form-check form-check-inline">

                                                                    @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.SecondOrderScrText)
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">

                                                            @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScreening)
                                                        </div>
                                                    </div>
                                                </div>
                                                @{
                                                    if (Model.ERApplications.ERScreeningDetail.ThirdOrderScreening == false)
                                                    {
                                                        <div class="form-group row">
                                                            @Html.LabelFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScrText, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                            <div class="col-sm-6 d-flex align-items-center">
                                                                <div class="form-check form-check-inline">

                                                                    @Html.DisplayTextFor(model => model.ERApplications.ERScreeningDetail.ThirdOrderScrText)
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldOIIP, "FieldOIIP (MMbbl)", htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="input-group mb-3">
                                                            @Html.DisplayFor(model => model.ERApplications.FieldOIIP, new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon1" } })
                                                        </div>


                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.FieldGIIP, "FieldGIIP (TCF)", htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="input-group mb-3">
                                                            @Html.DisplayFor(model => model.ERApplications.FieldGIIP, new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon2" } })

                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.TechnicallyCompatible, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">

                                                            @Html.DisplayTextFor(model => model.ERApplications.TechnicallyCompatible)

                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.EconomicViability, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        <div class="form-check form-check-inline">

                                                            @Html.DisplayTextFor(model => model.ERApplications.EconomicViability)
                                                        </div>

                                                    </div>
                                                </div>

                                                <div class="form-group row">
                                                    @Html.LabelFor(model => model.ERApplications.AdditonalRemarks, htmlAttributes: new { @class = "col-sm-5 col-form-label font-weight-bold" })
                                                    <div class="col-sm-6 d-flex align-items-center">
                                                        @Html.DisplayFor(model => model.ERApplications.AdditonalRemarks, new { htmlAttributes = new { @class = "form-control" } })

                                                    </div>
                                                </div>
                                                <div id="DetailViewFile" class="form-group row">
                                                    <div class="pl-2 border-primary col-sm-12" style="border:dashed">
                                                        <p class="text-info font-weight-bold h5">Documents</p>
                                                        @Html.HiddenFor(model => model.ERApplications.ERScreeningDetail.ReportDocumentPath)
                                                        @if (ViewBag.ERFiles.Count > 0)
                                                        {
                                                            foreach (var x in ViewBag.ERFiles)
                                                            {
                                                                <div class='badge badge-warning mr-2 mb-2'>
                                                                    <a class='text-dark' href="@Url.Content("~/Content/UploadedFiles/" + x.FileName)" target='_blank'>@x.FileName</a>
                                                                </div>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <h6 class="text-danger font-weight-bold">No File Found</h6>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>


                            </div>
                        </div>

                    </div>
                }
            }
            <div id="QueryCommentTab" class="container-fluid tab-pane fade ">

            </div>


        </div>

    </div>
</div>
<script type="text/javascript">
    const OnSuccess=(response)=> {
        //alertModal(response);

        //$('#operatorform').find('input,select,radio').prop('disabled', true);
        //$('#ERAppSubmit').hide();
        //$('.statussuccess').empty().append(response).removeClass('d-none');
        // setTimeout(function () {
        //        $('.fileDelete, .FileDiv').addClass('d-none');
        //    }, 500);

        console.log(response);
        if (response == "Success")
            window.location.href = "@Url.Action("Index","Operator")";
        else {
            alert("Fill Comments If You Select Order Screening : No");
            return false;
        }
    }

    const OnFailure = (response) => {
        console.log(response);
        alertModal("Try Again Error Occured.");
    }
    $(document).ready(()=> {

        $.each($('#ERApplications_ImplementaionType option'), function (index, element) {
            if ($(this).val() == "1" || $(this).val() == "0") {
                $(this).addClass('oil');
            }
            else if ($(this).val() == "4" || $(this).val() == "") {

            }
            else {
                $(this).addClass('gas');
            }
        });


        $('[data-toggle="tooltip"]').tooltip();
        if ($('#ERApplications_AppId').val() != "") {
            $('#disabledForm').prop('disabled',true)
            //$('#operatorform').find('input,select,radio').prop('disabled', true);
            $('#ERAppSubmit').hide();
            $('.statussuccess').empty().append('Application Ref. No. : ' + $('#ERApplications_AppId').val()).removeClass('d-none');
            GetUploadFilesData('#UploadFilesData', $('#ReportDocument').val());
            setTimeout(()=> {
                $('.fileDelete').addClass('d-none');
            });
        }
        else {

            $('#ERApplications_DateOfDiscovery').val('');
            $("#ERApplications_ImplementaionType option[value='']").attr('selected', true);
            $('#FileDiv').removeClass('d-none');
        }


        $(document.body).on('change', '#ERApplications_HydrocarbonType', ({ currentTarget }) => {

            console.log(currentTarget.selectedOptions[0].text);
            let selectedOption = currentTarget.selectedOptions[0].text;
            let actionDiv = $("#uhcProdnMethodDiv");

            if ("UHC" == selectedOption && actionDiv.is(":hidden")) {
                actionDiv.val('').fadeIn("slow");
                $('#ERApplications_FieldGIIP').prop('disabled', false);
                $('#ERApplications_FieldOIIP').prop('disabled', false);
                $('.oil').prop('hidden', false);
                $('.gas').prop('hidden', false);
            } else if (actionDiv.is(":visible")) {
                actionDiv.val('').fadeOut("slow");
                $("#uhcProdnMethodDiv option[value='']").attr('selected', true);
            }

            if ($('#ERApplications_HydrocarbonType option:selected').val() == '0') {
                $('.gas').prop('hidden', true);
                $('.oil').prop('hidden', false);
                $('#ERApplications_FieldGIIP').prop('disabled', true);
                $('#ERApplications_FieldGIIP').val('');
                $('#ERApplications_FieldOIIP').prop('disabled', false);
                $("#ERApplications_ImplementaionType option[value='']").attr('selected', true);
            }
            else if ($('#ERApplications_HydrocarbonType option:selected').val() == '1') {
                $('.oil').prop('hidden', true);
                $('.gas').prop('hidden', false);
                $('#ERApplications_FieldGIIP').prop('disabled', false);
                $('#ERApplications_FieldOIIP').prop('disabled', true);
                $('#ERApplications_FieldOIIP').val('');
                $("#ERApplications_ImplementaionType option[value='']").attr('selected', true);
            }
        });

        $(document).on("change", "input[name='ERApplications.ERScreeningStatus']", ({currentTarget})=> {
            let actionDiv = $('#FileDiv');

            if (currentTarget.value == "True") {
                $("#opertor1").click();
                actionDiv.val('').fadeIn("slow");
            } else if (actionDiv.is(":visible")) {
                actionDiv.val('').fadeOut("slow");
                $("#FileDiv option[value='']").attr('selected', true);
            }
        });


        $('#formModal').on('show.bs.modal', (event)=> {
            let button = $(event.relatedTarget); // Button that triggered the modal
            let targetPage = button.data('page'); // Extract page redirection from data-* attributes
            let modalTitle = button.data('title');// Extract Modal title from data-* attributes
            // Initiate an AJAX request here (and then updating in a callback)
            $("#formModalLabel").html("Add " + modalTitle);
            $.ajax({
                url: "/Operator/AjaxAdd?targetPage=" + targetPage,
                success: (result)=> {
                    $('#modalContent').html(result);
                    if ($("#saveButton").is(":hidden")) {
                        $('#saveButton').show();
                    }
                },
                error: ()=> {
                    $('#modalContent').html('<div class="alert alert-danger" role="alert"> An Error has occured </div >');
                    if ($("#saveButton").is(":visible")) {
                        $('#saveButton').fadeOut();
                    }
                },
                fail: (xhr, textStatus, errorThrown)=> {
                    $('#modalContent').html('<div class="alert alert-danger" role="alert">Request Failed with error: ' + errorThrown + '</div > ');
                    if ($("#saveButton").is(":visible")) {
                        $('#saveButton').fadeOut();
                    }
                }
            });
        });
        $('#formDetailModal').on('show.bs.modal',  (event)=> {
            let button = $(event.relatedTarget); // Button that triggered the modal
            let targetPage = button.data('page'); // Extract page redirection from data-* attributes
            let modalTitle = button.data('title');// Extract Modal title from data-* attributes
            let RefId = button.attr('form-ref-id');
            // Initiate an AJAX request here (and then updating in a callback)
            $("#formModalLabelView").html(modalTitle);
            $.ajax({
                url: "/Operator/AjaxViewDetails?targetPage=" + targetPage + "&&RefId=" + RefId,
                success: (result)=> {
                    $('#modalContentView').html(result);
                    if (targetPage == "ERScreeningDetailView") {

                        GetUploadFilesData('#DetailViewFile', $('#eRScreeningDetail_ReportDocumentPath').val());
                        setTimeout( ()=> {
                            $('.fileDelete').remove();
                        }, 500);
                    }
                },
                error: ()=> {
                    $('#modalContentView').html('<div class="alert alert-danger" role="alert"> An Error has occured </div >');

                },
                fail: (xhr, textStatus, errorThrown)=> {
                    $('#modalContentView').html('<div class="alert alert-danger" role="alert">Request Failed with error: ' + errorThrown + '</div > ');

                }
            });
        });

        $(document).on('submit', '#myForm', (e)=> {
            // stop default form submission
            e.preventDefault();

            // if ($('#UploadFilesData').find('div').length != 0 && ) {

            let formUrl = $('#myForm').attr('action');

            $.ajax({
                url: formUrl,
                type: 'POST',
                data: $('#myForm').serialize(),
                success: (result)=> {
                    let res = result.split(",");
                    if ('Success' == res[0]) {
                        if (res[2] == "ERScreeningDetail") {

                            $('#ERApplications_ERScreeningDetailId').val(res[1]);
                            erscreeninglinkshowhideonload();

                        }

                        $('#modalContent').html('<div class="alert alert-success" role="alert"> Successfully Added </div >');
                        if ($("#saveButton").is(":visible")) {
                            $('#saveButton').fadeOut();
                        }
                    } else {
                        $('#modalContent').html(result);
                    }
                },
                error: (result)=> {

                    $('#modalContent').html(result);
                },
                fail: (xhr, textStatus, errorThrown)=> {
                    $('#modalContent').html('<div class="alert alert-danger" role="alert">Request Failed with error: ' + errorThrown + '</div > ');
                    if ($("#saveButton").is(":visible")) {
                        $('#saveButton').fadeOut();
                    }
                }


            });
            // }
            //  else {
            //      return false;
            //  }

        });

        $(document).on("change", "input[name='ERApplications.PresentlyUnderProduction']", ({currentTarget})=> {
            let actionDiv = $("#DateOfLastCommercialProductionDiv");
            console.log(currentTarget);
            if ($('#ERApplications_DateOfInitialCommercialProduction').val() != '') {
                if (currentTarget.value == "False") {
                    actionDiv.val('').fadeIn("slow");
                } else if (currentTarget.value == "True") {
                    CheckERScreeningEligibility();
                    actionDiv.val('').fadeOut("slow");
                    $('input[name="ERApplications.DateOfLastCommercialProduction"]').val('');
                }
            }
            else {
                alertModal("Select Date of Commencement of Commercial Production");
                currentTarget.checked = false;
            }
        });
        $(document).on('change', 'input[name="ERApplications.DateOfLastCommercialProduction"]', ({ currentTarget}) => {
            let d1 = $('#ERApplications_DateOfLastCommercialProduction');
            let d2 = $('#ERApplications_DateOfInitialCommercialProduction');

            let msg = "";
             if (currentTarget.value != "") {
                let statusval = CompareTwoDates(d1, d2);
                statusval == false ? alertModal(msg) : CheckERScreeningEligibility();
                return statusval;
            }
            else {
                return false;
            }
        });

        $(document).on('change', '#ERApplications_DateOfInitialCommercialProduction', ({ currentTarget }) => {
            let d1 = $('#ERApplications_DateOfInitialCommercialProduction');
            let d2 = $('#ERApplications_DateOfDiscovery');
            let msg = "(Date Of Initial Commercial Production > Date Of Discovery) Or (Date Of Initial Commercial Production Or Date Of Discovery Are Empty.)";
            if (currentTarget.value != "") {
                let statusval = CompareTwoDates(d1, d2);
                statusval == false ? alertModal(msg) : null;
                return statusval;
            }
            else {
                return false;
            }
         });

        $(document).on('change', 'input[name="ERApplications.FieldOIIP"]', ()=> {

            checkMandatoryPilot();
        });
        $(document).on('change', 'input[name="ERApplications.FieldGIIP"]', ()=> {

            checkMandatoryPilot();
        });
    });

    $(document).on('change', '#ERApplications_DateOfDiscovery', ()=> {
        CheckEligibleToFillERForm();
    });
    $(document).on('click', '.Querycommenttablink', function () {

          $.ajax({
              url: "@Url.Action("QueryCommentSummary", "Comment", new { appid = Model.ERApplications.Id })",
              type:'POST',
              success: function (result) {
                   @{ string[] arr = Session["UserData"] as string[]; }
                  console.log(result);
                  if (result.length == 0) {
                      $("#QueryCommentTab .body-panel").html('<h3 class="text-danger ">Data Not Found</h3>');
                  }
                  else {
                      var dd = "";
                      var userid = "@arr[0]";
                      var statuscheck = "";
                      var counter = 1;
                      var subject = "";
                      var replybtn = "";
                      var resolvedbtn = "";
                      for(let element of result)
                      {
                          if (element[0].Subject != subject) {
                              subject = element[0].Subject;
                              dd += "<div class=''><div class='alert alert-success h5'>Query : " + counter + " Subject : " + subject + "</div>";
                              counter++;
                          }
                          dd += "<div class='alert alert-light border border-danger'><p class='h5 float-right'>Query Between " + element[0].Sender.SenderName +" and "+ element[0].Reciver.ReciverName+"</p><hr/>";
                          for(let f of element)
                          {
                              let files = "";
                              for (let e of f.Files)
                              {
                                  files += '<a class="badge badge-success mr-2" href="' + e.FilePath + '" target="blank"><i class="fas fa-file-download"></i> ' + e.FileName + '</a>';
                              };

                              if (f.Status == "Query Rasied") {
                                  statuscheck = "Query Rasied To " + f.Reciver.ReciverName + " by " + f.Sender.SenderName;

                              }
                              else if (f.Status == "Query Reply") {
                                  statuscheck = "Query Reply To " + f.Reciver.ReciverName + " by " + f.Sender.SenderName;
                              }
                              else if (f.Status == "Query Forward") {
                                  statuscheck = "Query Forward To " + f.Reciver.ReciverName + " by " + f.Sender.SenderName;
                              }
                              else {
                                  statuscheck = "";
                              }
                              if (f.Reciver.ReciverId == userid || f.Sender.SenderId == userid) {
                                  replybtn = '<button class="btn btn-sm btn-primary ml-2 BtnQueryReply" data-page="QueryCommentReply" data-query-parentid="' + f.QueryParentId + '" data-query-id="' + f.Id +
                                      '" data-toggle="modal" data-target="#CommentModal" data-title="Query Reply"><i class="fas fa-reply"></i> Reply</button>';
                              }
                              else {
                                  replybtn = "";
                              }


                                   dd += ' <li class="left clearfix "><span class="chat_img pull-left">' +
                                  '	<span class="chat_img"> <img src="../Content/img/user-profile.png" alt="User" style="width:50px"> </span>' +
                                  '</span><div class="chat-body clearfix"><div class="header"><strong class="text-danger h5">' + statuscheck + '</strong> <small class="pull-right text-muted">' +
                                  '<i class="fas fa-clock"></i> ' + ToChangeDateFormate(f.CreatedAt) + '</small></div><div><p><b>Subject :</b> ' + f.Subject + '</p></div>' +
                                  '<p><b>Comments :</b> ' + f.Comments + '</p><div class="mb-2"><p>' + files + '</p ></div>' +
                                  '<div class="float-right" > <button class="btn btn-sm btn-success BtnQueryForward" data-page="QueryCommentForward" data-query-parentid="' + f.QueryParentId + '" data-query-id="' + f.Id +
                                  '" data-toggle="modal" data-target="#CommentModal" data-title="Query Forward"><i class="fas fa-forward"></i> Forward</button>' +replybtn+
                                  '</div ></div ></li > ';

                              if (f.Sender.SenderId == userid && f.Status == "Query Rasied") {
                                  resolvedbtn = '<div class="alert alert-light"><button class="btn btn-sm btn-info ml-2 BtnQueryResolved" data-page="QueryCommentResolved" data-query-parentid="' + f.QueryParentId + '" data-query-id="' + f.Id +
                                      '" data-toggle="modal" data-target="#CommentModal" data-title="Query Resolved"><i class="fas fa-check"></i> Mark As Resolved</button></div>';
                              }
                              else {
                                  resolvedbtn = "";
                              }
                          };
                          dd += resolvedbtn + "</div></div>";
                      };

                          //  var subject = "<div class='col alert alert-info'><h5 class=''>Subject : " + result[1].Subject + "</h4></div>"
                          $("#QueryCommentTab .body-panel").html('<ul class="chat">' + dd + '</ul>');
                      }
                  },
             error: function () {

                      alertModal("Something Went Wrong. Try Again Later");
                  },
             fail: function (xhr, textStatus, errorThrown) {

                      alertModal("Something Went Wrong. Try Again Later");
                  }
              });

    });

    $(document).on("change", "input[name='ERApplications.ERScreeningDetail.FirstOrderScreening']", ({ currentTarget }) => {
        let firstodertext = $('.FirstOrderScrText');
        currentTarget.value == "False" ? firstodertext.removeClass('d-none') : firstodertext.addClass('d-none').find('textarea').val('');
    });

    $(document).on("change", "input[name='ERApplications.ERScreeningDetail.SecondOrderScreening']", ({ currentTarget }) => {
        let secondodertext = $('.SecondOrderScrText');
        currentTarget.value == "False" ? secondodertext.removeClass('d-none') : secondodertext.addClass('d-none').find('textarea').val('');
     });

    $(document).on("change", "input[name='ERApplications.ERScreeningDetail.ThirdOrderScreening']", ({currentTarget}) => {
        console.log(currentTarget.value);
        let thirdodertext = $('.ThirdOrderScrText');
        currentTarget.value == "False" ? thirdodertext.removeClass('d-none') : thirdodertext.addClass('d-none').find('textarea').val('');
    });

    ////////////////
    //  Function  //
    ////////////////

    const checkMandatoryPilot = ()=> {

        let FieldOIIP = $('#ERApplications_FieldOIIP');
        let FieldGIIP = $('#ERApplications_FieldGIIP');
        let pilotprodprofile = $('#ERApplications_PilotProductionProfile');
        let pilotdesign = $('input[name="ERApplications.PilotDesign"]:eq(0)');

        if (FieldGIIP.val() != '' && $('#ERApplications_HydrocarbonType option:selected').val() == '1') {

            if (parseFloat(FieldGIIP.val()) < 0.25) {
                $('.pilotmandatory').attr('data-original-title', 'Not Mandatory');
                pilotprodprofile.removeAttr('required');
                $('input[name="ERApplications.PilotDesign"]').removeAttr('disabled');
            }
            else {
                $('.pilotmandatory').attr('data-original-title', 'Mandatory');
                pilotprodprofile.attr('required', 'required');
                pilotdesign.prop("checked", true);
                $('input[name="ERApplications.PilotDesign"]').attr('disabled', 'disabled');
            }
        }
        else if (FieldOIIP.val() != '' && $('#ERApplications_HydrocarbonType option:selected').val() == '0') {
            if (parseFloat(FieldOIIP.val()) < 25) {
                $('.pilotmandatory').attr('data-original-title', 'Not Mandatory');
                pilotprodprofile.removeAttr('required');
                $('input[name="ERApplications.PilotDesign"]').removeAttr('disabled');
            }
            else {
                $('.pilotmandatory').attr('data-original-title', 'Mandatory');
                pilotprodprofile.attr('required', 'required');
                pilotdesign.prop("checked", true);
                $('input[name="ERApplications.PilotDesign"]').attr('disabled', 'disabled');
            }
        }
        else {
            $('.pilotmandatory').attr('data-original-title', 'If OIIP < 25 MMBBL Or GIIP < 0.25 TCF then Not Mandatory otherwise Mandatory');
        }


    }
    const CheckEligibleToFillERForm =()=> {
        let dateofdiscoveryval = $('#ERApplications_DateOfDiscovery').val().split('/');
        let dateofdiscovery = $('#ERApplications_DateOfDiscovery');
        let currentdate = new Date();
        let diffYear = "";
        let diffmonth = "";
        let diffdate = "";
        let msg = "Date Of Discovery Less Then 3 Years. So You Cannot Fill ER Proposal";

        diffYear = currentdate.getFullYear() - parseInt(dateofdiscoveryval[0]);
        diffmonth = parseInt((currentdate.getMonth() + 1)) - parseInt(dateofdiscoveryval[1]);
        diffdate = parseInt(currentdate.getDate()) - parseInt(dateofdiscoveryval[2]);

        if (diffYear > 3) {
            alertModal('Eligible To Fill ER Proposal');
        }
        else if (diffYear == 3) {
            if (diffmonth >= 0) {
                if (diffdate < 0) {
                    alertModal(msg);
                    dateofdiscovery.val('');
                }
            }
            else {
                alertModal(msg);
                dateofdiscovery.val('');
            }
        }
        else {
            alertModal(msg);
            dateofdiscovery.val('');
        }

    }
    const CheckERScreeningEligibility = ()=> {

        let dateofinitial = $('#ERApplications_DateOfInitialCommercialProduction').val();
        let dateoflastsubmission = $('#ERApplications_DateOfLastCommercialProduction').val();
        let initialdatesplit = dateofinitial.split("/");
        let currentdate = new Date();
        let diffYear = "";
        let diffmonth = "";
        let diffdate = "";
        let statusval = true;
        if (dateoflastsubmission != '') {
            let lastdatesplit = dateoflastsubmission.split("/");
            diffYear = parseInt(lastdatesplit[0]) - parseInt(initialdatesplit[0]);
            diffmonth = parseInt(lastdatesplit[1]) - parseInt(initialdatesplit[1]);
            diffdate = parseInt(lastdatesplit[2]) - parseInt(initialdatesplit[2]);
        }
        else {

            diffYear = currentdate.getFullYear() - parseInt(initialdatesplit[0]);
            diffmonth = parseInt((currentdate.getMonth() + 1)) - parseInt(initialdatesplit[1]);
            diffdate = parseInt(currentdate.getDate()) - parseInt(initialdatesplit[2]);
        }
        if (diffYear > 3) {
            statusval = true;
            alertModal('ERScreening Details Mandatory');
        }
        else if (diffYear == 3) {
            if (diffmonth >= 0) {
                if (diffdate >= 0) {
                     statusval = true;
                    alertModal('ERScreening Details Mandatory');

                }
                else {
                     statusval = false;
                    alertModal('ERScreening Details Not Mandatory');

                }
            }
            else {
                 statusval = false;
                alertModal('ERScreening Details Not Mandatory');
            }
        }
        else {
             statusval = false;
            alertModal('ERScreening Details Not Mandatory');
        }
        return statusval;
    }

    const CheckOrderScreening = (e) => {
        let RadFirstOrderId = $('#ERApplications_ERScreeningDetail_FirstOrderScreening');
        let RadSecondOrderId = $('#ERApplications_ERScreeningDetail_SecondOrderScreening');
        let RadThirdOrderId = $('#ERApplications_ERScreeningDetail_ThirdOrderScreening');

    };


</script>
